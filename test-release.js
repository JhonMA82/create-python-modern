#!/usr/bin/env node

import { execSync } from 'child_process'
import { config } from 'dotenv'
import fs from 'fs'

// Load environment variables
config()

console.log('üîç [TEST] Iniciando verificaci√≥n del script de release...\n')

try {
  // 1. Verificar NPM_TOKEN
  console.log('1Ô∏è‚É£  Verificando NPM_TOKEN...')
  if (!process.env.NPM_TOKEN) {
    throw new Error('NPM_TOKEN no encontrado en .env')
  }
  console.log('‚úÖ NPM_TOKEN encontrado\n')

  // 2. Verificar rama
  console.log('2Ô∏è‚É£  Verificando rama actual...')
  const branch = execSync('git rev-parse --abbrev-ref HEAD', { encoding: 'utf8' }).trim()
  if (branch !== 'master' && branch !== 'main') {
    throw new Error(`Rama incorrecta: ${branch}`)
  }
  console.log(`‚úÖ Rama correcta: ${branch}\n`)

  // 3. Verificar estado de git
  console.log('3Ô∏è‚É£  Verificando estado del repositorio...')
  const gitStatus = execSync('git status --porcelain', { encoding: 'utf8' }).trim()
  if (gitStatus) {
    console.log('‚ö†Ô∏è  Cambios detectados:')
    console.log(gitStatus)
    console.log('\nüí° Necesitas hacer commit de los cambios primero:')
    console.log('   git add .')
    console.log('   git commit -m "tu mensaje"')
    throw new Error('Hay cambios sin commitear')
  }
  console.log('‚úÖ Repositorio limpio\n')

  // 4. Verificar package.json
  console.log('4Ô∏è‚É£  Verificando package.json...')
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'))
  const versionRegex = /^\d+\.\d+\.\d+$/
  if (!versionRegex.test(packageJson.version)) {
    throw new Error(`Versi√≥n inv√°lida: ${packageJson.version}`)
  }
  console.log(`‚úÖ Versi√≥n v√°lida: ${packageJson.version}\n`)

  // 5. Verificar si existe tag
  console.log('5Ô∏è‚É£  Verificando tags existentes...')
  try {
    execSync(`git tag -l v${packageJson.version}`, { stdio: 'pipe' })
    console.log(`‚úÖ Tag v${packageJson.version} ya existe\n`)
  } catch (error) {
    console.log(`‚ÑπÔ∏è  Tag v${packageJson.version} no existe (se crear√°)\n`)
  }

  console.log('üéâ ¬°Todas las verificaciones pasaron exitosamente!')
  console.log('\nüöÄ El script de release est√° listo para ejecutarse.')
  console.log('Ejecuta: npm run release')
} catch (error) {
  console.error(`‚ùå ERROR: ${error.message}`)
  process.exit(1)
}
